{"version":3,"sources":["redux/modules/quoteSlice.js","components/QuoteBox.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["quoteSlice","createSlice","name","initialState","quote","author","reducers","setQuote","state","action","payload","actions","getRandomQuote","dispatch","a","axios","get","res","_","sample","data","quotes","selectQuote","selectAuthor","QuoteBox","useDispatch","useEffect","useSelector","style","display","flexDirection","justifyContent","padding","id","width","borderStyle","borderWidth","borderColor","borderRadius","minHeight","fontStyle","type","onClick","backgroundColor","border","color","textAlign","textDecoration","fontSize","outline","boxShadow","target","rel","href","encodeURIComponent","margin","position","top","right","xmlns","height","viewBox","opacity","d","App","configureStore","reducer","quoteReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAOaA,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACZC,MAAO,GACPC,OAAQ,IAEVC,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAMJ,MAAQK,EAAOC,QAAQN,MAC7BI,EAAMH,OAASI,EAAOC,QAAQL,WAKrBE,EAAaP,EAAWW,QAAxBJ,SAEFK,EAAiB,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEAChBC,IAAMC,IAnBxB,0IAkBkC,OAC5BC,EAD4B,OAElCJ,EAASN,EAASW,IAAEC,OAAOF,EAAIG,KAAKC,UAFF,2CAAN,uDAKjBC,EAAc,SAACd,GAAD,OAAWA,EAAMJ,MAAMA,OACrCmB,EAAe,SAACf,GAAD,OAAWA,EAAMJ,MAAMC,QAEpCL,IAAf,QC8EewB,EArGE,WACf,IAAMX,EAAWY,cACjBC,qBAAU,WACRb,EAASD,OACR,CAACC,IACJ,IAAMT,EAAQuB,YAAYL,GACpBjB,EAASsB,YAAYJ,GAE3B,OACE,yBACEK,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,QAAS,SAGX,yBACEC,GAAG,YACHL,MAAO,CACLM,MAAO,QACPC,YAAa,QACbC,YAAa,MACbC,YAAa,UACbC,aAAc,OACdN,QAAS,SAGX,6BACE,wBAAIC,GAAG,UAAU5B,IAEnB,6BACE,uBACE4B,GAAG,OACHL,MAAO,CACLW,UAAW,QACXP,QAAS,sBACTQ,UAAW,WAGZpC,IAGL,yBACEwB,MAAO,CACLC,QAAS,OACTC,cAAe,MACfC,eAAgB,WAGlB,4BACEE,GAAG,YACHQ,KAAK,SACLC,QAAS,kBAAM7B,EAASD,MACxBgB,MAAO,CACLe,gBAAiB,QACjBC,OAAQ,oBACRN,aAAc,OACdO,MAAO,QACPb,QAAS,YACTc,UAAW,SACXC,eAAgB,OAChBlB,QAAS,eACTmB,SAAU,OACVC,QAAS,MACTC,UACE,+DAhBN,eAuBJ,uBACEjB,GAAG,cACHkB,OAAO,SACPC,IAAI,sBACJC,KAAI,gDAA2CC,mBAC7ClD,EAAQ,MAAQC,IAElBuB,MAAO,CACL2B,OAAQ,OACRC,SAAU,WACVC,IAAK,MACLC,MAAO,OAGT,yBACEC,MAAM,6BACNzB,MAAM,KACN0B,OAAO,KACPC,QAAQ,aAER,0BAAMC,QAAQ,IAAIC,EAAE,kBACpB,0BAAMA,EAAE,ymBCtFHC,EAbH,WACV,OACE,yBACEpC,MAAO,CACLe,gBAAiB,QACjBiB,OAAQ,UAGV,kBAAC,EAAD,QCRSK,cAAe,CAC5BC,QAAS,CACP9D,MAAO+D,KCOSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c6daa354.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\n\r\nconst QUOTE_URL =\r\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n\r\nexport const quoteSlice = createSlice({\r\n  name: \"quote\",\r\n  initialState: {\r\n    quote: \"\",\r\n    author: \"\",\r\n  },\r\n  reducers: {\r\n    setQuote: (state, action) => {\r\n      state.quote = action.payload.quote;\r\n      state.author = action.payload.author;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setQuote } = quoteSlice.actions;\r\n\r\nexport const getRandomQuote = () => async (dispatch) => {\r\n  const res = await axios.get(QUOTE_URL);\r\n  dispatch(setQuote(_.sample(res.data.quotes)));\r\n};\r\n\r\nexport const selectQuote = (state) => state.quote.quote;\r\nexport const selectAuthor = (state) => state.quote.author;\r\n\r\nexport default quoteSlice.reducer;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getRandomQuote,\r\n  selectQuote,\r\n  selectAuthor,\r\n} from \"../redux/modules/quoteSlice\";\r\n\r\nconst QuoteBox = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getRandomQuote());\r\n  }, [dispatch]);\r\n  const quote = useSelector(selectQuote);\r\n  const author = useSelector(selectAuthor);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        padding: \"2rem\",\r\n      }}\r\n    >\r\n      <div\r\n        id=\"quote-box\"\r\n        style={{\r\n          width: \"400px\",\r\n          borderStyle: \"solid\",\r\n          borderWidth: \"1px\",\r\n          borderColor: \"#e7e7e7\",\r\n          borderRadius: \"10px\",\r\n          padding: \"1rem\",\r\n        }}\r\n      >\r\n        <div>\r\n          <h5 id=\"author\">{author}</h5>\r\n        </div>\r\n        <div>\r\n          <p\r\n            id=\"text\"\r\n            style={{\r\n              minHeight: \"130px\",\r\n              padding: \"1rem 0rem 1rem 0rem\",\r\n              fontStyle: \"italic\",\r\n            }}\r\n          >\r\n            {quote}\r\n          </p>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <button\r\n            id=\"new-quote\"\r\n            type=\"button\"\r\n            onClick={() => dispatch(getRandomQuote())}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              border: \"1px solid #e7e7e7\",\r\n              borderRadius: \"10px\",\r\n              color: \"black\",\r\n              padding: \"15px 32px\",\r\n              textAlign: \"center\",\r\n              textDecoration: \"none\",\r\n              display: \"inline-block\",\r\n              fontSize: \"12px\",\r\n              outline: \"0px\",\r\n              boxShadow:\r\n                \"0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19)\",\r\n            }}\r\n          >\r\n            New Quote\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <a\r\n        id=\"tweet-quote\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(\r\n          quote + \" - \" + author\r\n        )}`}\r\n        style={{\r\n          margin: \"1rem\",\r\n          position: \"absolute\",\r\n          top: \"0px\",\r\n          right: \"0%\",\r\n        }}\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"24\"\r\n          height=\"24\"\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <path opacity=\"0\" d=\"M0 0h24v24H0z\"></path>\r\n          <path d=\"M23.643 4.937c-.835.37-1.732.62-2.675.733.962-.576 1.7-1.49 2.048-2.578-.9.534-1.897.922-2.958 1.13-.85-.904-2.06-1.47-3.4-1.47-2.572 0-4.658 2.086-4.658 4.66 0 .364.042.718.12 1.06-3.873-.195-7.304-2.05-9.602-4.868-.4.69-.63 1.49-.63 2.342 0 1.616.823 3.043 2.072 3.878-.764-.025-1.482-.234-2.11-.583v.06c0 2.257 1.605 4.14 3.737 4.568-.392.106-.803.162-1.227.162-.3 0-.593-.028-.877-.082.593 1.85 2.313 3.198 4.352 3.234-1.595 1.25-3.604 1.995-5.786 1.995-.376 0-.747-.022-1.112-.065 2.062 1.323 4.51 2.093 7.14 2.093 8.57 0 13.255-7.098 13.255-13.254 0-.2-.005-.402-.014-.602.91-.658 1.7-1.477 2.323-2.41z\"></path>\r\n        </svg>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteBox;\r\n","import React, { useEffect } from \"react\";\r\nimport QuoteBox from \"./components/QuoteBox\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <QuoteBox />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport quoteReducer from \"./modules/quoteSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    quote: quoteReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/configureStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}